import numpy as np
from numpy.polynomial.legendre import leggauss
import scipy


def leggausslobatto(N):
    return [
        (np.array([-1, 1]), np.array([1.0, 1.0])), 
        (np.array([-1, 0, 1]), np.array([1.0, 4.0, 1.0]) / 3), 
        (np.array([-1, -0.4472135954999579, 0.4472135954999579, 1]), 
         np.array([1.0, 5.0, 5.0, 1.0]) / 6),
        (np.array([-1.0, -0.6546536707079773, 0.0, 0.6546536707079773, 1.0]), 
         np.array([9.0, 49.0, 64.0, 49.0, 9.0]) / 90),
        (np.array([-1.0, -0.7650553239294646, -0.2852315164806452, 0.2852315164806452, 0.7650553239294646, 1.0]), 
         np.array([1.0 / 15.0, 0.378474956297847, 0.554858377035486, 0.554858377035486, 0.378474956297847, 1.0 / 15.0])),
        (np.array([-1.0, -0.8302238962785669, -0.4688487934707142, 0.0, 
                   0.4688487934707142, 0.8302238962785669, 1.0]),  
         np.array([1.0 / 21.0, 0.276826047361566, 0.431745381209860,
                   0.487619047619048, 0.431745381209862, 0.276826047361567,
                   1.0 / 21.0])),
        (np.array([-1.0, -0.8717401485096066, -0.5917001814331421, 
                   -0.2092992179024791, 0.2092992179024791, 0.5917001814331421,
                   0.8717401485096066, 1.0]),
         np.array([1.0 / 28.0, 0.210704227143507, 0.341122692483504,
                   0.412458794658705, 0.412458794658705, 0.341122692483504,
                   0.210704227143507, 1.0 / 28.0])),
        (np.array([-1.0, -0.8997579954114600, -0.6771862795107377, 
                   -0.3631174638261783, 0.0, 0.3631174638261783,
                   0.6771862795107377, 0.8997579954114600, 1.0]),
         np.array([1.0 / 36.0, 0.165495361560806, 0.274538712500161,
                   0.346428510973042, 0.371519274376423, 0.346428510973042,
                   0.274538712500161, 0.165495361560806, 1.0 / 36.0])),
        (np.array([-1.0, -0.9195339081664589, -0.7387738651055048, 
                   -0.4779249498104444, -0.1652789576663869, 0.1652789576663869,
                   0.4779249498104444, 0.7387738651055048, 0.9195339081664589,
                   1.0]),
         np.array([1.0 / 45.0, 0.133305990851069, 0.224889342063126,
                   0.292042683679679, 0.327539761183898, 0.327539761183898,
                   0.292042683679680, 0.224889342063126, 0.133305990851071,
                   1.0 / 45.0])),
        (np.array([-1, -0.934001430408059134, -0.78448347366314442, -0.565235326996205007, -0.295758135586939391, 
                   0, 0.295758135586939391, 0.565235326996205007, 0.784483473663144419, 0.934001430408059134, 1]), 
         np.array([0.0181818181818181818, 0.109612273266994865, 0.187169881780305204, 
                   0.248048104264028314,0.286879124779008089, 0.30021759545569069, 0.286879124779008089, 
                   0.248048104264028314, 0.187169881780305204, 0.109612273266994865, 0.0181818181818181818])),
        (np.array([-1, -0.944899272222882223, -0.819279321644006678, -0.632876153031860678, -0.399530940965348932, 
                   -0.136552932854927555, 0.136552932854927555, 0.399530940965348932, 0.632876153031860678, 
                   0.819279321644006678, 0.944899272222882223, 1]), 
         np.array([0.0151515151515151515, 0.09168451741319613, 0.15797470556437012, 0.212508417761021145, 
                   0.25127560319920128, 0.271405240910696177, 0.271405240910696177, 0.25127560319920128, 
                   0.21250841776102115, 0.157974705564370115, 0.091684517413196131, 0.0151515151515151515])), 
        (np.array([-1, -0.953309846642163912, -0.84634756465187232, -0.686188469081757426, -0.482909821091336202, 
                   -0.249286930106239993, 0, 0.249286930106239993, 0.482909821091336202, 0.686188469081757426, 
                   0.84634756465187232, 0.953309846642163912, 1]), 
         np.array([0.0128205128205128205, 0.07780168674681893, 0.134981926689608349, 0.18364686520355009, 
                   0.220767793566110086, 0.24401579030667636, 0.251930849333446736, 0.244015790306676357, 
                   0.220767793566110086, 0.183646865203550092, 0.13498192668960835, 0.07780168674681893, 
                   0.0128205128205128205])), 
        (np.array([-1, -0.959935045267260901, -0.867801053830347251, -0.728868599091326141, -0.550639402928647055, 
                   -0.342724013342712845, -0.116331868883703868, 0.116331868883703868, 0.342724013342712845, 
                   0.550639402928647055, 0.728868599091326141, 0.867801053830347251, 0.959935045267260901, 1]), 
         np.array([0.010989010989010989, 0.06683728449768128, 0.116586655898711652, 0.160021851762952142, 
                   0.19482614937341612, 0.219126253009770755, 0.231612794468457059, 0.23161279446845706, 
                   0.219126253009770755, 0.19482614937341612, 0.16002185176295214, 0.116586655898711652, 
                   0.066837284497681285, 0.010989010989010989])), 
        (np.array([-1, -0.965245926503838573, -0.885082044222976299, -0.763519689951815201, -0.606253205469845711, 
                   -0.420638054713672481, -0.215353955363794238, 0, 0.215353955363794238, 0.420638054713672481, 
                   0.606253205469845711, 0.763519689951815201, 0.885082044222976299, 0.965245926503838573, 1]), 
         np.array([0.00952380952380952381, 0.05802989302860125, 0.101660070325718068, 0.14051169980242811, 
                   0.172789647253600949, 0.19698723596461336, 0.21197358592682092, 0.21704811634881565, 
                   0.21197358592682092, 0.19698723596461336, 0.17278964725360095, 0.14051169980242811, 
                   0.101660070325718068, 0.058029893028601249, 0.00952380952380952381])), 
        (np.array([-1, -0.969568046270217933, -0.899200533093472093, -0.792008291861815064, -0.65238870288249309, 
                   -0.486059421887137612, -0.299830468900763208, -0.101326273521949448, 0.101326273521949448, 
                   0.299830468900763208, 0.486059421887137612, 0.65238870288249309, 0.79200829186181506, 
                   0.899200533093472093, 0.969568046270217933, 1]), 
         np.array([0.00833333333333333333, 0.05085036100591991, 0.089393697325930801, 0.124255382132514098, 
                   0.154026980807164281, 0.177491913391704125, 0.19369002382520358, 0.201958308178229872, 
                   0.201958308178229872, 0.19369002382520358, 0.177491913391704125, 0.154026980807164281, 
                   0.124255382132514098, 0.089393697325930801, 0.050850361005919905, 0.00833333333333333333])), 
        (np.array([-1, -0.973132176631418314, -0.910879995915573596, -0.815696251221770307, -0.691028980627684705, 
                   -0.541385399330101539, -0.372174433565477042, -0.189511973518317388, 0, 0.189511973518317388, 
                   0.372174433565477042, 0.541385399330101539, 0.691028980627684705, 0.815696251221770307, 
                   0.910879995915573596, 0.973132176631418314, 1]), 
         np.array([0.00735294117647058824, 0.04492194054325421, 0.079198270503687119, 0.110592909007028161, 
                   0.137987746201926559, 0.16039466199762154, 0.17700425351565787, 0.18721633967761924, 
                   0.190661874753469433, 0.187216339677619236, 0.17700425351565787, 0.16039466199762154, 
                   0.137987746201926559, 0.110592909007028161, 0.079198270503687119, 0.04492194054325421, 
                   0.00735294117647058824])), 
        (np.array([-1, -0.976105557412198543, -0.920649185347533874, -0.835593535218090214, -0.723679329283242681, 
                   -0.588504834318661761, -0.434415036912123975, -0.26636265287828098, -0.089749093484652111, 
                   0.089749093484652111, 0.266362652878280984, 0.434415036912123975, 0.588504834318661761, 
                   0.723679329283242681, 0.835593535218090214, 0.920649185347533874, 0.976105557412198543, 1]), 
         np.array([0.00653594771241830065, 0.039970628810914066, 0.070637166885633665, 0.0990162717175028, 
                   0.1242105331329671, 0.145411961573802268, 0.161939517237602489, 0.173262109489456226, 
                   0.17901586343970308, 0.17901586343970308, 0.173262109489456226, 0.16193951723760249, 
                   0.145411961573802268, 0.1242105331329671, 0.099016271717502802, 0.070637166885633665, 
                   0.03997062881091407, 0.00653594771241830065])), 
        (np.array([-1, -0.978611766222080095, -0.928901528152586244, -0.852460577796646093, -0.751494202552613014, 
                   -0.628908137265220498, -0.488229285680713503, -0.33350484782449861, -0.169186023409281571, 0, 
                   0.169186023409281571, 0.33350484782449861, 0.488229285680713503, 0.628908137265220498, 
                   0.751494202552613014, 0.852460577796646093, 0.928901528152586244, 0.978611766222080095, 1]),  
         np.array([0.00584795321637426901, 0.035793365186176477, 0.063381891762629737, 0.0891317570992070845, 
                   0.11231534147730504, 0.132267280448750777, 0.14841394259593889, 0.160290924044061242, 
                   0.167556584527142867, 0.170001919284827235, 0.16755658452714287, 0.160290924044061242, 
                   0.14841394259593889, 0.132267280448750777, 0.112315341477305044, 0.089131757099207084, 
                   0.063381891762629737, 0.035793365186176477, 0.00584795321637426901])), 
        (np.array([-1, -0.980743704893914172, -0.935934498812665436, -0.866877978089950141, -0.77536826095205587, 
                   -0.66377640229031129, -0.53499286403188626, -0.392353183713909299, -0.239551705922986495, 
                   -0.080545937238821838, 0.080545937238821838, 0.239551705922986495, 0.392353183713909299, 
                   0.534992864031886262, 0.66377640229031129, 0.77536826095205587, 0.866877978089950141, 
                   0.935934498812665436, 0.980743704893914172, 1]), 
         np.array([0.00526315789473684211, 0.032237123188488941, 0.057181802127566826, 0.080631763996119603,
                   0.10199149969945082, 0.12070922762867473, 0.136300482358724185, 0.148361554070916826,
                   0.156580102647475487, 0.16074328638784575, 0.160743286387845749, 0.156580102647475487,
                   0.14836155407091683, 0.13630048235872418, 0.12070922762867473, 0.101991499699450816,
                   0.0806317639961196, 0.057181802127566826, 0.032237123188488941, 0.00526315789473684211]))
    ][N - 2]


def lgl_points(N):
    """Returns N Legendre-Gauss-Lobatto collocation points."""
    return leggausslobatto(N)[0]


def lgl_weights(N):
    """Returns N Legendre-Gauss-Lobatto quadrature weights."""
    return leggausslobatto(N)[1]


def lg_points(N):
    """Returns N Legendre-Gauss collocation points."""
    return leggauss(N)[0]


def lg_weights(N):
    """Returns N Legendre-Gauss quadrature weights."""
    return leggauss(N)[1]


def logical_coords(x, extents):
    x = np.asarray(x)
    rs = np.ones(x.ndim, int)
    rs[0] = -1
    a = np.squeeze(np.diff(extents)) / 2
    b = np.sum(extents, axis=-1) / 2
    return (x - b.reshape(rs)) / a.reshape(rs)


def inertial_coords(xi, extents):
    xi = np.asarray(xi)
    rs = np.ones(xi.ndim, int)
    rs[0] = -1
    a = np.squeeze(np.diff(extents)) / 2
    b = np.sum(extents, axis=-1) / 2
    return a.reshape(rs) * xi + b.reshape(rs)


# Functions copied from Harald Pfeiffer's lecture notes

def vandermonde_matrix(r):
    alpha = 0
    beta = 0
    N = len(r) - 1

    # Vandermonde matrix for Legendre polynomials
    # V[i,j] = P_j(r_i),  j=0,...,N,  i=0,...,len(r)-1
    V = np.zeros((len(r), N+1))
    for j in range(N+1):
        # scipy normalization determined by trial and error.
        # For **LAGRANGE POLY** ONLY, not general alpha, beta.
        # This makes the returned polynomials orthonormal
        normalization = np.sqrt((1.+2.*j)/2.)
        V[:, j] = scipy.special.eval_jacobi(j, alpha, beta, r)*normalization
        # or V[:,j] = scipy.special.legendre(j)(r)

        # check normalization
        # tmp_r, tmp_w = scipy.special.roots_jacobi(j+1, alpha, beta)
        # tmp_L=scipy.special.eval_jacobi(j, alpha, beta, tmp_r)*normalization
        # L_dot_L = sum(tmp_w*tmp_L*tmp_L)
        # print("j={}, (L,L)={}".format(j, L_dot_L))
    return V


def logical_differentiation_matrix(r):
    V = vandermonde_matrix(r)
    Vinv = np.linalg.inv(V)

    alpha = 0
    beta = 0
    N = len(r) - 1

    # derivatives of Legendre polynomials, evaluated at quadrature points
    # Vr[i,j] = dP_j/dr(r_i),  j=0,...,N,  i=0,...,len(r)-1
    #   use dP_j/dr = sqrt(j(j+1)) J^{alpha+1,beta+1}_{j-1}  (H+W, Eq A2)
    #
    Vr = np.zeros((len(r), N+1))
    for j in range(1, N+1):
        # scipy normalization determined by trial and error.
        # For **LAGRANGE POLY** ONLY, not general alpha, beta.
        # This makes the returned polynomials orthonormal, conforming
        # to H+W conventions
        scipy_normalization = np.sqrt((1.+2.*j)*(j+1.)/(8.*j))
        normed_J = scipy.special.jacobi(
            j-1, alpha+1, beta+1)(r)*scipy_normalization
        Vr[:, j] = np.sqrt(j*(j+alpha+beta+1.))*normed_J  # H+W Eq. A2

        # - check normalization
        # - integrate by Legendre quadrature, to explicitly show weight-function in orthogonality
        # tmp_r, tmp_w = scipy.special.roots_jacobi(j+4, alpha, beta)
        # tmp_L=scipy.special.eval_jacobi(j-1, alpha+1, beta+1, tmp_r)*scipy_normalization
        # - evaluate orthogonality; note weight function (1-r)(1+r)
        # L_dot_L = sum(tmp_w*tmp_L*tmp_L*(1-tmp_r)*(1+tmp_r))
        # print("j={}, (L,L)={}".format(j, L_dot_L))

    # derivatives of Lagrange interpolating polynomials
    #    Dr(i,j) = dl_j/dr(r=r_i),
    # where  l_j(r_i) = delta_{ij}
    # compute using P_j(r) = V[i,j]*l_i(r) =>  V[i,j] dl_i/dr = dP_j/dr     (*)
    #     => V^{-T} V^T[j,i] dl_i/dr = V^{-T} dP_j/dr
    Dr = np.matmul(Vr, Vinv)
    return Dr


def logical_mass_matrix(r):
    V = vandermonde_matrix(r)
    return np.linalg.inv(V @ V.T)


def diag_logical_mass_matrix(w):
    return np.diag(w)
